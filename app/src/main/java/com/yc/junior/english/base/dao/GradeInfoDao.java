package com.yc.junior.english.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yc.junior.english.read.model.domain.GradeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE_INFO".
*/
public class GradeInfoDao extends AbstractDao<GradeInfo, Long> {

    public static final String TABLENAME = "GRADE_INFO";

    /**
     * Properties of entity GradeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Grade = new Property(2, String.class, "grade", false, "GRADE");
        public final static Property IsSelected = new Property(3, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property PartType = new Property(4, String.class, "partType", false, "PART_TYPE");
        public final static Property Type = new Property(5, int.class, "Type", false, "TYPE");
    }


    public GradeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GradeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"GRADE\" TEXT," + // 2: grade
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 3: isSelected
                "\"PART_TYPE\" TEXT," + // 4: partType
                "\"TYPE\" INTEGER NOT NULL );"); // 5: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GradeInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(3, grade);
        }
        stmt.bindLong(4, entity.getIsSelected() ? 1L: 0L);
 
        String partType = entity.getPartType();
        if (partType != null) {
            stmt.bindString(5, partType);
        }
        stmt.bindLong(6, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GradeInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(3, grade);
        }
        stmt.bindLong(4, entity.getIsSelected() ? 1L: 0L);
 
        String partType = entity.getPartType();
        if (partType != null) {
            stmt.bindString(5, partType);
        }
        stmt.bindLong(6, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GradeInfo readEntity(Cursor cursor, int offset) {
        GradeInfo entity = new GradeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // grade
            cursor.getShort(offset + 3) != 0, // isSelected
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // partType
            cursor.getInt(offset + 5) // Type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GradeInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGrade(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSelected(cursor.getShort(offset + 3) != 0);
        entity.setPartType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GradeInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GradeInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GradeInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
