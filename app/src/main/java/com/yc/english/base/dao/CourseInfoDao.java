package com.yc.english.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yc.english.weixin.model.domain.CourseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_INFO".
*/
public class CourseInfoDao extends AbstractDao<CourseInfo, Void> {

    public static final String TABLENAME = "COURSE_INFO";

    /**
     * Properties of entity CourseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Keywords = new Property(3, String.class, "keywords", false, "KEYWORDS");
        public final static Property Type_id = new Property(4, String.class, "type_id", false, "TYPE_ID");
        public final static Property Period = new Property(5, String.class, "period", false, "PERIOD");
        public final static Property Flag = new Property(6, String.class, "flag", false, "FLAG");
        public final static Property Author = new Property(7, String.class, "author", false, "AUTHOR");
        public final static Property Add_time = new Property(8, String.class, "add_time", false, "ADD_TIME");
        public final static Property Add_date = new Property(9, String.class, "add_date", false, "ADD_DATE");
        public final static Property Img = new Property(10, String.class, "img", false, "IMG");
        public final static Property Html = new Property(11, String.class, "html", false, "HTML");
    }


    public CourseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CourseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_INFO\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"URL\" TEXT," + // 2: url
                "\"KEYWORDS\" TEXT," + // 3: keywords
                "\"TYPE_ID\" TEXT," + // 4: type_id
                "\"PERIOD\" TEXT," + // 5: period
                "\"FLAG\" TEXT," + // 6: flag
                "\"AUTHOR\" TEXT," + // 7: author
                "\"ADD_TIME\" TEXT," + // 8: add_time
                "\"ADD_DATE\" TEXT," + // 9: add_date
                "\"IMG\" TEXT," + // 10: img
                "\"HTML\" TEXT);"); // 11: html
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(4, keywords);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(5, type_id);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(6, period);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(7, flag);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(9, add_time);
        }
 
        String add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindString(10, add_date);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(11, img);
        }
 
        String html = entity.getHtml();
        if (html != null) {
            stmt.bindString(12, html);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(4, keywords);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(5, type_id);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(6, period);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(7, flag);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(9, add_time);
        }
 
        String add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindString(10, add_date);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(11, img);
        }
 
        String html = entity.getHtml();
        if (html != null) {
            stmt.bindString(12, html);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CourseInfo readEntity(Cursor cursor, int offset) {
        CourseInfo entity = new CourseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // keywords
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // period
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // flag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // author
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // add_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // add_date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // img
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // html
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKeywords(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPeriod(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdd_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdd_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHtml(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CourseInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CourseInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(CourseInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
