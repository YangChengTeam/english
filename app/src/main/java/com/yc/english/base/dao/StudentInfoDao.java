package com.yc.english.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yc.english.group.model.bean.StudentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT_INFO".
*/
public class StudentInfoDao extends AbstractDao<StudentInfo, Long> {

    public static final String TABLENAME = "STUDENT_INFO";

    /**
     * Properties of entity StudentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SId = new Property(0, long.class, "sId", true, "_id");
        public final static Property Add_date = new Property(1, String.class, "add_date", false, "ADD_DATE");
        public final static Property Add_time = new Property(2, String.class, "add_time", false, "ADD_TIME");
        public final static Property Class_id = new Property(3, String.class, "class_id", false, "CLASS_ID");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
        public final static Property Nick_name = new Property(5, String.class, "nick_name", false, "NICK_NAME");
        public final static Property User_id = new Property(6, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(7, String.class, "user_name", false, "USER_NAME");
        public final static Property Class_name = new Property(8, String.class, "class_name", false, "CLASS_NAME");
        public final static Property Sn = new Property(9, String.class, "sn", false, "SN");
        public final static Property Master_id = new Property(10, String.class, "master_id", false, "MASTER_ID");
        public final static Property IsAudit = new Property(11, boolean.class, "isAudit", false, "IS_AUDIT");
        public final static Property Face = new Property(12, String.class, "face", false, "FACE");
        public final static Property IsForbid = new Property(13, boolean.class, "isForbid", false, "IS_FORBID");
        public final static Property ForbidTime = new Property(14, String.class, "forbidTime", false, "FORBID_TIME");
    }


    public StudentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StudentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: sId
                "\"ADD_DATE\" TEXT," + // 1: add_date
                "\"ADD_TIME\" TEXT," + // 2: add_time
                "\"CLASS_ID\" TEXT," + // 3: class_id
                "\"ID\" TEXT," + // 4: id
                "\"NICK_NAME\" TEXT," + // 5: nick_name
                "\"USER_ID\" TEXT," + // 6: user_id
                "\"USER_NAME\" TEXT," + // 7: user_name
                "\"CLASS_NAME\" TEXT," + // 8: class_name
                "\"SN\" TEXT," + // 9: sn
                "\"MASTER_ID\" TEXT," + // 10: master_id
                "\"IS_AUDIT\" INTEGER NOT NULL ," + // 11: isAudit
                "\"FACE\" TEXT," + // 12: face
                "\"IS_FORBID\" INTEGER NOT NULL ," + // 13: isForbid
                "\"FORBID_TIME\" TEXT);"); // 14: forbidTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSId());
 
        String add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindString(2, add_date);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(3, add_time);
        }
 
        String class_id = entity.getClass_id();
        if (class_id != null) {
            stmt.bindString(4, class_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(6, nick_name);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(8, user_name);
        }
 
        String class_name = entity.getClass_name();
        if (class_name != null) {
            stmt.bindString(9, class_name);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(10, sn);
        }
 
        String master_id = entity.getMaster_id();
        if (master_id != null) {
            stmt.bindString(11, master_id);
        }
        stmt.bindLong(12, entity.getIsAudit() ? 1L: 0L);
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(13, face);
        }
        stmt.bindLong(14, entity.getIsForbid() ? 1L: 0L);
 
        String forbidTime = entity.getForbidTime();
        if (forbidTime != null) {
            stmt.bindString(15, forbidTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSId());
 
        String add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindString(2, add_date);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(3, add_time);
        }
 
        String class_id = entity.getClass_id();
        if (class_id != null) {
            stmt.bindString(4, class_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(6, nick_name);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(8, user_name);
        }
 
        String class_name = entity.getClass_name();
        if (class_name != null) {
            stmt.bindString(9, class_name);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(10, sn);
        }
 
        String master_id = entity.getMaster_id();
        if (master_id != null) {
            stmt.bindString(11, master_id);
        }
        stmt.bindLong(12, entity.getIsAudit() ? 1L: 0L);
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(13, face);
        }
        stmt.bindLong(14, entity.getIsForbid() ? 1L: 0L);
 
        String forbidTime = entity.getForbidTime();
        if (forbidTime != null) {
            stmt.bindString(15, forbidTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public StudentInfo readEntity(Cursor cursor, int offset) {
        StudentInfo entity = new StudentInfo( //
            cursor.getLong(offset + 0), // sId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // add_date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // add_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // class_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nick_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // class_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sn
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // master_id
            cursor.getShort(offset + 11) != 0, // isAudit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // face
            cursor.getShort(offset + 13) != 0, // isForbid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // forbidTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentInfo entity, int offset) {
        entity.setSId(cursor.getLong(offset + 0));
        entity.setAdd_date(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdd_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClass_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNick_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClass_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSn(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaster_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsAudit(cursor.getShort(offset + 11) != 0);
        entity.setFace(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsForbid(cursor.getShort(offset + 13) != 0);
        entity.setForbidTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudentInfo entity, long rowId) {
        entity.setSId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudentInfo entity) {
        if(entity != null) {
            return entity.getSId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
